from pydantic import BaseModel, ConfigDict
from typing import Optional

class PuzzlePieceBase(BaseModel):
    """
    The base schema for a Puzzle Piece. It defines the common attributes.
    """
    name: str
    description: Optional[str] = None
    geom: str # We accept the geometry as a Well-Known Text (WKT) string.

class PuzzlePieceCreate(PuzzlePieceBase):
    """
    A schema used specifically for creating a new Puzzle Piece.
    It inherits all fields from the base schema.
    """
    pass

class PuzzlePiece(PuzzlePieceBase):
    """
    A schema used for reading a Puzzle Piece from the database.
    It includes the 'id' which is generated by the database.
    """
    id: int
    
    # This configuration tells Pydantic it can read the data
    # from a SQLAlchemy model object.
    model_config = ConfigDict(from_attributes=True)